name: Release

on:
  push:
    tags:     'v*'
  workflow_dispatch:
  
jobs:

  linuxNative:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y xorg-dev build-essential mesa-common-dev libx11-dev libxrandr-dev libgl1-mesa-dev libglu1-mesa-dev libfreetype6-dev libopenal-dev libsndfile1-dev libudev-dev libxinerama-dev libxcursor-dev vulkan-tools libvulkan-dev vulkan-validationlayers-dev spirv-tools xvfb x11-apps imagemagick

    - name: get hop
      run: ./getLibs.sh

    - name: linux native build
      run: |
        source version.sh
        ./build.sh -r
        mkdir linuxbuild
        cp build/Stellar/Stellar linuxbuild/
        mv build/Stellar/res linuxbuild/
        cp LICENSE linuxbuild/
        cp LICENSES.md linuxbuild/
        cp README.md linuxbuild/

    - name: sign build
      run: |
        export GPG_TTY=$(tty)  
        echo "${{ secrets.GPG_KEY }}" > priv
        gpg --pinentry-mode=loopback --passphrase "${{ secrets.GPG_PASS }}" --import priv
        rm priv

        cd linuxbuild
        md5sum Stellar > Stellar.md5

        gpg --pinentry-mode=loopback --passphrase "${{ secrets.GPG_PASS }}" -b Stellar

    - name: buildArtifact
      uses: actions/upload-artifact@v4
      with:
        name: Stellar-linux-x86_64
        path: linuxbuild

  linuxXwindows:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update && sudo apt-get install -y xorg-dev build-essential mesa-common-dev libx11-dev libxrandr-dev libgl1-mesa-dev libglu1-mesa-dev libfreetype6-dev libopenal-dev libsndfile1-dev libudev-dev g++-mingw-w64-x86-64-posix gcc-mingw-w64-x86-64-posix libz-mingw-w64-dev mingw-w64-common libxinerama-dev libxcursor-dev vulkan-tools libvulkan-dev vulkan-validationlayers-dev spirv-tools wine64
          
    - name: get hop
      run: ./getLibs.sh

    - name: windows mingw build
      run: |
        source version.sh
        ./build.sh -r -w
        mkdir windowsbuild
        cp build/Stellar/Stellar.exe windowsbuild/
        mv build/Stellar/res windowsbuild/
        cp build/libwinpthread* windowsbuild/
        cp LICENSE windowsbuild/
        cp LICENSES.md windowsbuild/
        cp README.md windowsbuild/

    - name: sign build
      run: |
        export GPG_TTY=$(tty)  
        echo "${{ secrets.GPG_KEY }}" > priv
        gpg --pinentry-mode=loopback --passphrase "${{ secrets.GPG_PASS }}" --import priv
        rm priv
        
        cd windowsbuild
        md5sum Stellar.exe > Stellar.exe.md5

        gpg --pinentry-mode=loopback --passphrase "${{ secrets.GPG_PASS }}" -b Stellar.exe

    - name: buildArtifact
      uses: actions/upload-artifact@v4
      with:
        name: Stellar-windows
        path: windowsbuild

  macosNative:
    runs-on: macos-11

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
          wget https://sdk.lunarg.com/sdk/download/latest/mac/vulkan-sdk.dmg
          hdiutil attach vulkan-sdk.dmg -mountpoint /Volumes/vulkan-sdk
          mkdir ~/vulkan
          cd /Volumes/vulkan-sdk/
          sudo ./InstallVulkan.app/Contents/macOS/InstallVulkan --root ~/vulkan --accept-licenses --default-answer --confirm-command install
          ls ~/vulkan
          cd ~/vulkan/
          python install_vulkan.py
          brew install md5sha1sum

    - name: get hop
      run: ./getLibs.sh

    - name: macos native build
      run: |
        source version.sh
        ./build.sh -r -o
        mkdir macosbuild
        cp build/Stellar/Stellar macosbuild/
        mv build/Stellar/res macosbuild/

    - name: sign build
      run: |
        export GPG_TTY=$(tty)  
        echo "${{ secrets.GPG_KEY }}" > priv
        gpg --pinentry-mode=loopback --passphrase "${{ secrets.GPG_PASS }}" --import priv
        rm priv

        cd macosbuild
        md5sum Stellar > Stellar.md5

        gpg --pinentry-mode=loopback --passphrase "${{ secrets.GPG_PASS }}" -b Stellar
        cd 

    - name: create .app bundle
      run: |
        source version.sh
        mkdir Stellar.app
        mkdir Stellar.app/Contents
        mkdir Stellar.app/Contents/Resources
        mkdir Stellar.app/Contents/MacOS
        cp macosbuild/Stellar Stellar.app/Contents/MacOS
        cp -r macosbuild/res Stellar.app/Contents/Resources
        cp macosbuild/*.sig Stellar.app/Contents/Resources
        cp macosbuild/*.md5 Stellar.app/Contents/Resources
        cp LICENSE Stellar.app/Contents/Resources
        cp LICENSES.md Stellar.app/Contents/Resources
        cp README.md Stellar.app/Contents/Resources
        
        cp common/macos/icon.icns Stellar.app/Contents/Resources/icons.icns
        cp common/macos/Info.plist Stellar.app/Contents/

        source common/replace.sh Stellar.app/Contents/Info.plist INFO_STRING "Stellar (C) Jerboa - GPLv3"
        source common/replace.sh Stellar.app/Contents/Info.plist EXE Stellar
        source common/replace.sh Stellar.app/Contents/Info.plist ID app.jerboa.Stellar
        source common/replace.sh Stellar.app/Contents/Info.plist NAME Stellar
        source common/replace.sh Stellar.app/Contents/Info.plist VERSION "$PRODUCT-$MAJOR.$MINOR.$PATCH"
        rm Stellar.app/Contents/Info.plist-e

        mkdir pkg
        cp -r Stellar.app pkg/
        cd

    - name: buildArtifact
      uses: actions/upload-artifact@v4
      with:
        name: Stellar-macos
        path: pkg

  linuxXandroid:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Install dependencies
      run: |
        sudo apt-get update && sudo apt-get install -y build-essential mesa-common-dev libx11-dev libxrandr-dev libgl1-mesa-dev libglu1-mesa-dev libfreetype6-dev libopenal-dev libsndfile1-dev libudev-dev vulkan-tools libvulkan-dev vulkan-validationlayers-dev spirv-tools
        wget https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
        unzip android-ndk-r25c-linux.zip
        wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip   
        unzip commandlinetools-linux-9477386_latest.zip
        export ANDROID_SDK_ROOT=~/
        mv cmdline-tools latest
        mkdir cmdline-tools
        mv latest cmdline-tools
        yes | ./cmdline-tools/latest/bin/sdkmanager --licenses
        ./cmdline-tools/latest/bin/sdkmanager --channel=3 emulator
        ./cmdline-tools/latest/bin/sdkmanager --install "system-images;android-34;google_apis;x86_64"
        ./cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-34"
        echo no | ./cmdline-tools/latest/bin/avdmanager create avd --name android34 --package "system-images;android-34;google_apis;x86_64"

    - name: get hop
      run: ./getLibs.sh

    - name: get keystore
      run: |
        export GPG_TTY=$(tty)  
        cd android
        echo "${{ secrets.KEYSTORE }}" > Stellar.jks.asc
        gpg --pinentry-mode=loopback -d --passphrase "${{ secrets.PASS }}" Stellar.jks.asc > Stellar.jks
        rm Stellar.prop
        echo "storePassword=${{ secrets.PASS }}" > Stellar.prop
        echo "keyPassword=${{ secrets.PASS }}" >> Stellar.prop
        echo "storeFile=../Stellar.jks" >> Stellar.prop
        echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> Stellar.prop
        cd ..

    - name: android build
      run: |
        export JAVA_HOME=$JAVA_HOME_17_X64
        source version.sh
        sed -i "s/VERSION_NAME/$PRODUCT-$MAJOR.$MINOR.$PATCH/g" android/app/build.gradle
        cd android
        ./gradlew bundleRelease
        cd ..
        mkdir androidbuild
        cp android/app/build/outputs/bundle/release/app-release.aab androidbuild/Stellar.aab
        cp LICENSE androidbuild/
        cp README.md androidbuild/ 
        cp LICENSES.md androidbuild/
        rm android/Stellar.prop

    - name: buildArtifact
      uses: actions/upload-artifact@v4
      with:
        name: Stellar-android
        path: androidbuild

  release:
    needs: [linuxNative, linuxXandroid, macosNative, linuxXwindows]
    if: github.ref_type == 'tag'
    runs-on: ubuntu-22.04
    
    steps:

      - name: get linux build
        uses: actions/download-artifact@v4
        with:
          name: Stellar-linux-x86_64

      - name: bundle linux
        run: |
          mkdir Stellar-linux-x86_64
          cp Stellar.* Stellar-linux-x86_64/
          cp Stellar Stellar-linux-x86_64/
          cp -r res Stellar-linux-x86_64/
          cp LICENSE* Stellar-linux-x86_64/
          cp README.md Stellar-linux-x86_64/
          chmod +x Stellar-linux-x86_64/Stellar
          tar -cvJf Stellar-linux-x86_64.tar.xz -C Stellar-linux-x86_64/ .

      - name: get windows build
        uses: actions/download-artifact@v4
        with:
          name: Stellar-windows

      - name: bundle windows
        run: |
          mkdir Stellar-windows
          cp Stellar.exe Stellar-windows/
          cp Stellar.exe.* Stellar-windows/
          cp *.dll Stellar-windows/
          cp -r res Stellar-windows/
          cp LICENSE* Stellar-windows/
          cp README.md Stellar-windows/
          cd Stellar-windows && zip -r ../Stellar-windows.zip . && cd ..

      - name: get macos build
        uses: actions/download-artifact@v4
        with:
          name: Stellar-macos

      - name: bundle macos
        run: |
          chmod +x Stellar.app/Contents/MacOS/Stellar
          tar -cvJf Stellar-macOS.tar.xz Stellar.app

      - name: get android build
        uses: actions/download-artifact@v4
        with:
          name: Stellar-android

      - name: bundle android
        run: |
          mkdir Stellar-android
          cp Stellar.aab Stellar-android/
          cp LICENSE* Stellar-android/
          cp README.md Stellar-android/
          cd Stellar-android && zip -r ../Stellar-android.zip . && cd ..

      - name: release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          prerelease: true
          name: "Stellar ${{ github.ref_name }}"
          tag_name: ${{ github.ref }}
          files: |
            Stellar-linux-x86_64.tar.xz
            Stellar-windows.zip
            Stellar-macOS.tar.xz
            Stellar-android.zip
            
